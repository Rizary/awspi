name: scientific
version: 0.3.4.11
id: scientific-0.3.4.11-inplace
key: scientific-0.3.4.11-inplace
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: 
trusted: False
import-dirs: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/scientific-0.3.4.11/build
library-dirs: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/scientific-0.3.4.11/build
dynamic-library-dirs: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/scientific-0.3.4.11/build
data-dir: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/src/scientific-0.3.4.11
hs-libraries: HSscientific-0.3.4.11-inplace
depends:
    base-4.9.1.0 binary-0.8.3.0 bytestring-0.10.8.1 containers-0.5.7.1
    deepseq-1.4.2.0 ghc-prim-0.5.0.0 hashable-1.2.6.0-inplace
    integer-gmp-1.0.0.1
    integer-logarithms-1.0.1-3b7340d5b65047a8c0f3a65a1a1b5a34294ebc0a708927ef058901cfb17172c6
    text-1.2.2.1-inplace
    vector-0.11.0.0-747572811dcd89de50db78d695def9411926b9d862a3530f6f27dbce5060a9b2
haddock-interfaces: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/scientific-0.3.4.11/doc/html/scientific/scientific.haddock
haddock-html: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/scientific-0.3.4.11/doc/html/scientific
