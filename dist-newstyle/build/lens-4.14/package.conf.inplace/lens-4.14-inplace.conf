name: lens
version: 4.14
id: lens-4.14-inplace
key: lens-4.14-inplace
license: BSD3
copyright: Copyright (C) 2012-2016 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.Deque
    Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
    Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
    Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
    Control.Lens.Internal.Instances Control.Lens.Internal.Iso
    Control.Lens.Internal.Level Control.Lens.Internal.List
    Control.Lens.Internal.Magma Control.Lens.Internal.Prism
    Control.Lens.Internal.Review Control.Lens.Internal.Setter
    Control.Lens.Internal.TH Control.Lens.Internal.Zoom
    Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
    Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
    Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
    Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
    Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
    Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
    Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
    Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
    System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
    Numeric.Lens
hidden-modules: Paths_lens
abi: 
trusted: False
import-dirs: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/lens-4.14/build
library-dirs: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/lens-4.14/build
dynamic-library-dirs: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/lens-4.14/build
data-dir: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/src/lens-4.14
hs-libraries: HSlens-4.14-inplace
depends:
    array-0.5.1.1 base-4.9.1.0
    base-orphans-0.5.4-70b07f02a9e65185f4ba3602af50ab0af7527de70c4846caf622e8cce5399668
    bifunctors-5.4.1-64bb07ab13b5183fed3f12058dd91129b2a2e5dfc79316213d1d91b62b446bd4
    bytestring-0.10.8.1
    comonad-5-51deb40a151be7d41ffe7d7e7a945eb7dcf1bde1990ee477197e1b0242597f20
    containers-0.5.7.1
    contravariant-1.4-c73dae490b90b7eead389b97595ab9daba069050fd984caedae2e2929dcd2056
    distributive-0.5.2-c876dc0cb5487bd765313fef779e68049e67856f1749164a1c0cb2d035e09b60
    exceptions-0.8.3-15e0648a3cf1b2bcca5d02513fa2fa0eb10566e8baab9955dc1302b9e2473770
    filepath-1.4.1.1
    free-4.12.4-02248ecd26337fce4c131eb5d0366c1864e3d3d5889f87466a487eba4f4f32a4
    ghc-prim-0.5.0.0 hashable-1.2.6.0-inplace
    kan-extensions-5.0.1-deca7a1990551f0504dcb6152f0d122d7e12e27fc532112d116c7d4c8cb6cb85
    mtl-2.2.1-5d9b5df850e90a3e609a82fb1bef8cd4e8ab21a48e5702daea55562265e70586
    parallel-3.2.1.1-041fdc386c7bd88a077469823a16fe0b3328f2f9f84150ca81a324d0d956f99d
    profunctors-5.2-8420ae0ac2eac3d30db36da1bb8b39f6f8162f808f95a6cd292500aaa6f774e8
    reflection-2.1.2-8f471615029a6ac0b64bfbc98cd5f5f6fef04a7dd4a33a5dc8027b5af85424ce
    semigroupoids-5.1-a48ccb3857fc17aabbf1ea93b93c55443a1f0233d3f0d681540b6539c7b4a7c7
    semigroups-0.18.2-91058d29bd8483f778dacc498b618b283f3991c8c1d08376a65b6a577fa54069
    tagged-0.8.5-cccbb72a714ee90a3e6f8894add41455e203270669563a4f005d11cb2c67b458
    template-haskell-2.11.1.0 text-1.2.2.1-inplace transformers-0.5.2.0
    transformers-compat-0.5.1.4-d9032ceff4ef423eddab52db28bce2ce205cd162f57c72373f4491d1cab911f3
    unordered-containers-0.2.8.0-inplace
    vector-0.11.0.0-747572811dcd89de50db78d695def9411926b9d862a3530f6f27dbce5060a9b2
    void-0.7.2-bb5151401d691a5c76d098b82b1fc73fa55bb49ee07619ac490b282ae1f39b07
haddock-interfaces: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/lens-4.14/doc/html/lens/lens.haddock
haddock-html: /Users/Rizitecs/Programming/Haskell/awspi/dist-newstyle/build/lens-4.14/doc/html/lens
