:seti -XNoMonomorphismRestriction
:set -XOverloadedStrings
:set +m
:set +t

import qualified IPPrint
import qualified Language.Haskell.HsColour as HsColour
import qualified Language.Haskell.HsColour.Colourise as HsColour
import qualified Language.Haskell.HsColour.Output as HsColour

let myColourPrefs = HsColour.defaultColourPrefs { HsColour.conid = [HsColour.Foreground HsColour.Yellow, HsColour.Bold],HsColour.conop = [HsColour.Foreground HsColour.Yellow],HsColour.string = [HsColour.Foreground HsColour.Green],HsColour.char = [HsColour.Foreground HsColour.Cyan],HsColour.number = [HsColour.Foreground HsColour.Red,HsColour.Bold],HsColour.layout = [HsColour.Foreground HsColour.White],HsColour.keyglyph = [HsColour.Foreground HsColour.White]}

let myPrint = putStrLn . HsColour.hscolour (HsColour.TTYg HsColour.XTerm256Compatible) myColourPrefs False False "" False . IPPrint.pshow

:set -interactive-print=myPrint

:set -fdefer-type-errors

let escape arg = "'" ++ concatMap (\c -> if c == '\'' then "'\"'\"'" else [c]) arg ++ "'"


:def! hoogle return . (":! hoogle --count=50 --color " ++) . escape
:def! hoogleDoc return . (":! hoogle --count=50 --color --info " ++) . escape

:set -fwarn-unused-binds -fwarn-unused-imports
:set -isrc


:set prompt "\ESC[5;32m\STXλ > \ESC[m\STX"
:set prompt2 "\ESC[1;32m\STXλ | \ESC[m\STX"